<?php
define('ORDER_STATUS_UNPAID', 0); // 已提交待付款
define('ORDER_STATUS_PAID', 1); // 已付款
define('ORDER_STATUS_UNDELIVERED', 2); // 待发货
define('ORDER_STATUS_DELIVERED', 3); // 待收货
define('ORDER_STATUS_PROVIDED_COMMENT', 4); // 已评价
define('ORDER_STATUS_FINISH', 5); // 交易完成
define('ORDER_STATUS_WAIT_FOR_COMMENT', 6); // 待评价
define('ORDER_STATUS_CANCEL', 7); // 已取消
define('SINGLE_PAGE_LIMIT', 100);

/**
 * Implements hook_services_resources().
 */
function orders_services_resources() {
  return array(
    'orders' => array(
      'operations' => array(
        'index' => array(
          'help' => t('订单列表'),
          'callback' => 'orders_lists',
          'access arguments' => array('access content'),
          'file' => array(
            'type' => 'inc',
            'module' => 'orders',
            'name' => 'includes/orders.resource'
          ),
          'args' => array(
            array(
              'name' => 'status',
              'optional' => TRUE,
              'source' => array('param' => 'status'),
              'description' => t('订单状态'),
              'type' => 'int',
            ),
          ),
        ),
        'update' => array(
          'help' => '更新订单',
          'callback' => 'orders_update',
          'access arguments' => array('access content'),
          'args' => array(
            array(
              'name' => 'orderid',
              'type' => 'string',
              'description' => '订单id',
              'source' => array('path' => 0),
              'optional' => FALSE,
            ),
            array(
              'name' => 'data',
              'type' => 'array',
              'description' => '订单状态',
              'source' => 'data',
              'optional' => FALSE,
            ),
          ),
        )
      ),
      'actions' => array(
        'pre_pay' => array(
          'help' => '预支付',
          'callback' => 'orders_pre_pay',
          'access arguments' => array('access content'),
          'args' => array(
            array(
              'name' => 'orderid',
              'type' => 'int',
              'description' => '订单id',
              'optional' => FALSE,
              'source' => array('data' => 'orderid')
            ),
            array(
              'name' => 'payment_type',
              'type' => 'int',
              'description' => '支付方式',
              'optional' => FALSE,
              'source' => array('data' => 'payment_type')
            ),
          ),
        ),
        'app_payment_callback' => array(
          'help' => '更新订单',
          'callback' => 'orders_alipay_callback',
          'access arguments' => array('access content'),
          'args' => array(
            array(
              'name' => 'data',
              'type' => 'array',
              'description' => '支付宝支付response数据',
              'source' => 'data',
              'optional' => FALSE,
            ),
          ),
        ),
      )
    ),
    'order' => array(
      'retrieve' => array(
        'help' => 'Retrieves an order',
        'file' => array(
          'type' => 'inc',
          'module' => 'orders',
          'name' => 'includes/orders.resource'
        ),
        'callback' => 'orders_order_resource_retrieve',
        'args' => array(
          array(
            'name' => 'oid',
            'optional' => FALSE,
            'source' => array('path' => 0),
            'type' => 'int',
            'description' => 'The id of the order to retrieve',
          ),
        ),
        'access arguments' => array('access content'),
      ),
      'actions' => array(
        'update' => array(
          'file' => array(
            'type' => 'inc',
            'module' => 'orders',
            'name' => 'includes/orders.resource'
          ),
          'help' => t('Update order status.'),
          'description' => 'Update an order status.',
          'access arguments' => array('access content'),
          'callback' => 'orders_update_order_status',
          'args' => array(
            array(
              'name' => 'sorderid',
              'type' => 'string',
              'description' => '订单id',
              'source' => array('data' => 'sorderid'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'status',
              'type' => 'string',
              'description' => '订单状态',
              'source' => array('data' => 'status'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'comment',
              'type' => 'string',
              'description' => '订单评价',
              'source' => array('data' => 'comment'),
              'optional' => TRUE,
            ),
          ),
        ),
      ),
    ),
  );
}

/**
 * Creating a unpaid order.
 * @param $uid
 * @param $nid
 * @param $product_type
 * @param $price
 * @return bool|int
 */
function _order_create_a_order($uid, $nid, $product_type, $price) {
  $order = new stdClass();
  $order->uid = $uid;
  $order->created = REQUEST_TIME;
  $order->nid = $nid;
  $order->product_type = $product_type;
  $order->amount = 1;
  $order->price = $price;
  $order->total_price = $price;
  $order->sorderid = date('YmdHis') . mt_rand(10000, 99999999);
  $order->status = (YIGOU_PRODUCT_CONTENT_TYPE == $product_type) ? ORDER_STATUS_UNPAID : ORDER_STATUS_UNDELIVERED;
  drupal_write_record('product_order', $order);
  return $order;
}


function orders_alipay_callback($appdata) {
  global $user;
  if (!$user->uid) {
    return services_error(t('用户未登录'), 406);
  }
  $appdata = _services_arg_value($appdata, 'data');
  if (!$appdata) {
    return services_error(t('缺少参数'), 406);
  }
  watchdog('支付宝返回app的数据', print_r($appdata, TRUE));
  $out_trade_no = $appdata['out_trade_no'];

  //支付宝交易号
  $trade_no = $appdata['trade_no'];

  //交易状态
  $trade_status = $appdata['trade_status'];
  $app_id = unserialize(variable_get('alipay_settings')['app_id']);

  $orderobj = db_query("SELECT * FROM {product_order} WHERE id=:id", array(':id' => $out_trade_no))->fetch();
  if ($orderobj) {
    if ($orderobj->total_price == $appdata['total_amount'] && $appdata['seller_id'] == $alipay_config['partner'] && $appdata['app_id'] == $app_id) {

      $order = new stdClass();
      $order->status = 1;
      $order->alipay_order_id = $trade_no;
      $order->payment_type = 1;
      drupal_write_record('product_order', $order, 'id');
      return ['success' => 1];
    }
    else {
      return services_error(t('支付数据异常'), 406);
    }
  }
  else {
    return services_error(t('订单id错误'), 406);
  }
}

function orders_menu() {
  $items = array();

  $items['payment/notify'] = array(
    'title' => '支付宝购买测试',
    'description' => '支付宝购买测试',
    'page callback' => 'orders_notify',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['refund/%'] = array(
    'title' => '支付宝退款',
    'description' => '支付宝购买测试',
    'page callback' => 'orders_refund',
    'access callback' => TRUE,
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  $items['payment/weixin_notify'] = array(
    'title' => '支付宝购买测试',
    'description' => '支付宝购买测试',
    'page callback' => 'orders_weixin_notify',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['payment/callback'] = array(
    'title' => '支付宝购买测试',
    'description' => '支付宝购买测试',
    'page callback' => 'orders_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['orders'] = array(
    'title' => '支付宝购买测试',
    'description' => '支付宝购买测试',
    'page callback' => 'orders_lists',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['orders/payment/weixin'] = array(
    'title' => '微信支付',
    'description' => '微信支付',
    'page callback' => 'orders_payementweixin',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/content/juna/settings'] = array(
    'title' => '支付配置',
    'description' => '支付相关配置',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('orders_alipay_settings_form'),
    'access arguments' => array('administer payment'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/content/juna/settings/alipay'] = array(
    'title' => '支付宝支付配置',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/content/juna/settings/weixin'] = array(
    'title' => '微信支付配置',
    'description' => '支付相关配置',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('orders_weixin_settings_form'),
    'access arguments' => array('administer payment'),
    'type' => MENU_LOCAL_TASK,
  );

  // Menus for order management.
  $items['admin/juna/orders'] = array(
    'title' => 'Order Management Portal',
    'description' => 'Manage orders.',
    'access arguments' => array('access order management portal'),
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'orders_admin_juna_orders_index',
    'file' => 'includes/orders.pages.inc',
  );
  $items['admin/juna/orders/detail/%/edit'] = array(
    'title' => 'Edit Order',
    'description' => 'Edit order page',
    'access arguments' => array('access order list'),
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('orders_admin_juna_orders_detail_edit_form', 4),
    'file' => 'includes/orders.pages.inc',
  );
  $items['admin/juna/orders/index'] = array(
    'title' => 'Order Management Portal',
    'description' => 'Manage orders.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'includes/orders.pages.inc',
  );
  $items['admin/juna/orders/list'] = array(
    'title' => 'Order List',
    'description' => 'Order list',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('orders_admin_list'),
    'access arguments' => array('access order list'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'file' => 'includes/orders.pages.inc',
  );
  return $items;
}

/**
 * Implementation of hook_permission().
 * @return array
 */
function orders_permission() {
  return array(
    'access order list' => array(
      'title' => t('Access order list'),
    ),
    'access order management portal' => array(
      'title' => t('Access order management portal'),
    )
  );
}

function orders_weixin_notify() {
  watchdog('weixin_notify', print_r($_REQUEST, TRUE));
  require_once 'weixin/weixin/notify.php';
  $notify = new WxPayNotifyCallBack();
  $notify->Handle(FALSE);
}

function orders_payementweixin($order) {
  module_load_include('inc', 'orders', 'includes/config');
  $newtime = $order->created + 30 * 60;
  $now = REQUEST_TIME;
  if ($now > $newtime) {
    cancelOrder($order);
    return services_error(t('订单支付超时'), 406);
    //echo json_encode(['errcode' => '10015','msg' => getConfig()['10015'],'data' => []]);exit;
  }
  $needkey = [
    'appid',
    'mch_id',
    'device_info',
    'nonce_str',
    'sign',
    'sign_type',
    'body',
    'detail',
    'attach',
    'out_trade_no',
    'fee_type',
    'total_fee',
    'spbill_create_ip',
    'notify_url',
    'trade_type'
  ];
  $optionalkey = [
    'device_info',
    'sign_type',
    'detail',
    'attach',
    'fee_type',
    'time_start',
    'time_expire',
    'goods_tag',
    'limit_pay'
  ];
  $weixin_settings = unserialize(variable_get('weixin_settings'));
  //print_r(session_id());
  //echo "111";
  //print_r(session_name());
  module_load_include('inc', 'orders', 'weixin/weixin');
  $attach = json_encode([
    'type' => 'consume',
    'sorderid' => $order->sorderid,
    'total_fee' => $order->total_price,
    'nid' => $order->nid,
    'orderid' => $order->id,
    'uid' => $order->uid
  ]);
  if (!isset($order->sorderid)) {
    $order->sorderid = date('YmdHis') . mt_rand(10000, 99999999);
  }
  $params = [
    'appid' => $weixin_settings['appid'],
    'much_id' => $weixin_settings['mchid'],
    'device_info' => 'WEB',
    //'nonce_str' => getRandStr(),
    'sign_type' => 'MD5',
    'body' => '测试',
    //'detail' => $detail,
    'attach' => $attach,
    'out_trade_no' => $order->sorderid,//$order -> id,
    'fee_type' => 'CNY',
    'total_fee' => $order->total_price * 100,
    'spbill_create_ip' => getenv("REMOTE_ADDR"),
    'notify_url' => $weixin_settings['notify_url'],
    'trade_type' => 'APP'
  ];
  return unifiedOrder($params);

}


function orders_pre_pay($orderid, $payment_type) {
  $order = db_query('SELECT * FROM {product_order} WHERE id=:id', array(':id' => $orderid))->fetch();
  if (!$order) {
    return services_error(t('订单id错误'), 406);
  }
  $newtime = $order->created + 30 * 60;
  $now = REQUEST_TIME;
  if ($now > $newtime) {
    $orderobj = new stdClass();
    $orderobj->id = $orderid;
    $orderobj->status = 7;
    drupal_write_record('product_order', $orderobj, 'id');
    return services_error(t('订单支付超时'), 406);
  }
  $orderobj = new stdClass();
  $orderobj->id = $orderid;
  $orderobj->payment_type = $payment_type;
  drupal_write_record('product_order', $orderobj, 'id');

  if ($payment_type == 1) {
    return _alipay_pre_pay($order);
  }
  elseif ($payment_type == 2) {
    return orders_payementweixin($order);
    //_weixin_pre_pay($order);
  }
}

function _alipay_pre_pay($order) {

  global $user;
  if (!$user->uid) {
    return services_error(t('用户未登录'), 406);
  }
  $alipay_settings = unserialize(variable_get('alipay_settings'));
  //$alipay_settings['app_id'] = "2016102900776032";
  //var_dump($alipay_settings);exit;
  module_load_include('inc', 'orders', 'alipay/server/php/lib/alipay_rsa.function');
  module_load_include('inc', 'orders', 'alipay/server/php/lib/alipay_core.function');
  $node = node_load($order->nid);
  $config = [];

  $config['app_id'] = $alipay_settings['app_id'];

  $passback_params = urlencode(json_encode(array(
    'uid' => $user->uid,
    'nid' => $order->nid,
    'orderid' => $order->sorderid,
    'total_fee' => $order->total_price * 100,

  )));
  $content = [
    'subject' => $node->title,
    'out_trade_no' => $order->sorderid,
    'timeout_express' => '30m',
    'total_amount' => $order->total_price,
    'seller_id' => $alipay_settings['seller_id'],
    'product_code' => 'QUICK_MSECURITY_PAY',
    'goods_type' => '1',
    'passback_params' => $passback_params
  ];
  $biz_content = json_encode($content);
  $config['biz_content'] = $biz_content;
  $private_key = $alipay_settings['private_key'];
  $signparam = [
    'app_id' => $alipay_settings['app_id'],
    'biz_content' => $biz_content,
    'charset' => 'utf-8',
    'format' => 'json',
    'method' => 'alipay.trade.app.pay',
    'notify_url' => $alipay_settings['notify_url'],
    'sign_type' => 'RSA',
    'timestamp' => date('Y-m-d H:i:s', $order->created),
    'version' => '1.0',


  ];
  $config['charset'] = 'utf-8';
  $config['format'] = 'json';
  $config['method'] = 'alipay.trade.app.pay';
  $config['notify_url'] = $alipay_settings['notify_url'];
  require_once 'alipay/AopSdk.php';
  $c = new AopClient;
  $c->gatewayUrl = "https://openapi.alipay.com/gateway.do";
  //$c->appId = '2016111602886056';//$alipay_settings['app_id'];
  //$c->gatewayUrl = "https://openapi.alipaydev.com/gateway.do";
  $c->appId = $alipay_settings['app_id'];//"2016102900776032";
  $c->rsaPrivateKey = $alipay_settings['private_key'];
  $c->format = "json";
  $c->charset = "utf-8";
  $c->alipayrsaPublicKey = $alipay_settings['public_key'];
  $sign = $c->generateSign($signparam);
  $config ['sign_type'] = 'RSA';
  $config['timestamp'] = date('Y-m-d H:i:s', $order->created);
  $config['version'] = '1.0';
  $config['sign'] = $sign;
  $str = http_build_query($config, NULL, ini_get('arg_separator.output'), PHP_QUERY_RFC3986);
  return ['data' => $str];


}

function orders_notify() {
  $alipay_settings = unserialize(variable_get('alipay_settings'));
  watchdog('alipay_notify', var_export($_POST, TRUE));
  watchdog('alipay_notify_get', var_export($_GET, TRUE));
  require_once 'alipay/AopSdk.php';
  $c = new AopClient;
  $c->gatewayUrl = "https://openapi.alipay.com/gateway.do";
  $c->appId = $alipay_settings['app_id'];//"2016102900776032";
  $c->rsaPrivateKey = $alipay_settings['private_key'];
  $c->format = "json";
  $c->charset = "utf-8";
  $c->alipayrsaPublicKey = $alipay_settings['public_key'];
  //$result = $c -> rsaCheckV1($_POST,$alipay_settings['public_key']);
  $out_trade_no = $_POST['out_trade_no'];
  //支付宝交易号
  $trade_no = $_POST['trade_no'];
  //交易状态
  $trade_status = $_POST['trade_status'];
  $attach = json_decode(urldecode($_POST['passback_params']));
  //var_export($attach);exit;
  if ($_POST['trade_status'] == 'TRADE_FINISHED') {
  }
  else {
    if ($_POST['trade_status'] == 'TRADE_SUCCESS') {
      //watchdog('aplipaty_notify','TRADE_SUCCESS');
      $orderobj = db_query("SELECT * FROM {product_order} WHERE sorderid=:id", array(':id' => $attach->orderid))->fetch();
      if ($orderobj) {
        //
        if ($orderobj->total_price == $_POST['total_amount'] && $_POST['seller_id'] == $alipay_settings['seller_id'] && $_POST['app_id'] == $alipay_settings['app_id']) {
          $order = new stdClass();
          $order->sorderid = $attach->orderid;
          $order->status = 1;
          $order->alipay_order_id = $trade_no;
          $order->payment_type = 1;
          drupal_write_record('product_order', $order, 'sorderid');
          $log = db_query('SELECT * from {user_amount_log} WHERE sorderid=:sorderid', array(':sorderid' => $out_trade_no))->fetchAll();
          if (empty($log)) {
            $record = new stdClass();
            $record->uid = $attach->uid;
            $record->total_fee = $attach->total_fee;
            $record->paytype = 'alipay';
            $record->paytime = REQUEST_TIME;
            $record->nid = $attach->nid;
            $record->status = 1;
            $record->sthirdorderno = $trade_no;
            $record->type = "consume";
            $record->sorderid = $out_trade_no;
            drupal_write_record('user_amount_log', $record);
          }
          else {
            db_update('user_amount_log')
              ->fields(array('status' => 1, 'sthirdorderno' => $trade_no))
              ->condition('sorderid', $out_trade_no)
              ->execute();
          }
        }
        else {
          watchdog('alipay_notify', '校验失败');
        }
      }
      echo "success";
    }
    else {
      watchdog('aplipaty_notify', 'pay fail');
      $log = db_query('SELECT * from {user_amount_log} WHERE sorderid=:sorderid', array(':sorderid' => $out_trade_no))->fetchAll();
      if (empty($log)) {
        $record = new stdClass();
        $record->uid = $attach->uid;
        $record->total_fee = $attach->total_fee;
        $record->paytype = 'alipay';
        $record->paytime = REQUEST_TIME;
        $record->nid = $attach->nid;
        $record->status = 2;
        $record->sthirdorderno = $trade_no;
        $record->type = "recharge";
        $record->sorderid = $out_trade_no;
        drupal_write_record('user_amount_log', $record);
        watchdog('weixin_recharge', "系统充值订单为:{$out_trade_no}的支付订单{$trade_no}充值失败,失败原因:{$_POST['return_code']}:{$_POST['return_msg']}");
      }
      else {
        db_update('user_amount_log')
          ->fields(array('status' => 2, 'sthirdorderno' => $trade_no))
          ->condition('sorderid', $out_trade_no)
          ->execute();
      }
    }
  }
  // echo "success";    //请不要修改或删除
}

function orders_callback() {
  return "成功";
}

function orders_alipay_settings_form($form, &$form_state) {
  $alipay_config = unserialize(variable_get('alipay_settings'));
  $form['app_id'] = array(

    '#type' => 'textfield',

    '#title' => t('应用app_id'),

    '#default_value' => (!empty($alipay_config)) ? $alipay_config['app_id'] : '',

    '#size' => 60,

    '#maxlength' => 128,

    '#required' => TRUE,

  );

  $form['app_key'] = array(

    '#type' => 'textfield',

    '#title' => t('app公钥'),

    '#default_value' => (!empty($alipay_config)) ? $alipay_config['app_key'] : '',

    '#size' => 60,

    '#maxlength' => 1000,

    '#required' => TRUE,

  );
  $form['public_key'] = array(

    '#type' => 'textfield',

    '#title' => t('支付公钥'),

    '#default_value' => (!empty($alipay_config)) ? $alipay_config['public_key'] : '',

    '#size' => 60,

    '#maxlength' => 1000,

    '#required' => TRUE,

  );
  $form['private_key'] = array(

    '#type' => 'textfield',

    '#title' => t('支付私钥'),

    '#default_value' => (!empty($alipay_config)) ? $alipay_config['private_key'] : '',

    '#size' => 60,

    '#maxlength' => 1000,

    '#required' => TRUE,

  );
  $form['seller_id'] = array(

    '#type' => 'textfield',

    '#title' => t('商户id'),

    '#default_value' => (!empty($alipay_config)) ? $alipay_config['seller_id'] : '',

    '#size' => 60,

    '#maxlength' => 128,

    '#required' => TRUE,

  );
  $form['notify_url'] = array(

    '#type' => 'textfield',

    '#title' => t('notify_url'),

    '#default_value' => (!empty($alipay_config)) ? $alipay_config['notify_url'] : '',

    '#size' => 60,

    '#maxlength' => 128,

    '#required' => TRUE,

  );

  $form['submit'] = array('#type' => 'submit', '#value' => t('保存配置'));
  return $form;
}

function orders_alipay_settings_form_submit($form, &$form_state) {
  $values = serialize($form_state['values']);
  variable_set('alipay_settings', $values);
  drupal_set_message('支付宝配置保存成功');
}

function orders_weixin_settings_form($form, &$form_state) {
  $weixin_config = unserialize(variable_get('weixin_settings'));
  $form['appid'] = array(

    '#type' => 'textfield',

    '#title' => t('应用app_id'),

    '#default_value' => (!empty($weixin_config)) ? $weixin_config['appid'] : '',

    '#size' => 60,

    '#maxlength' => 128,

    '#required' => TRUE,

  );
  $form['mchid'] = array(

    '#type' => 'textfield',

    '#title' => t('商户id'),

    '#default_value' => (!empty($weixin_config)) ? $weixin_config['mchid'] : '',

    '#size' => 60,

    '#maxlength' => 1000,

    '#required' => TRUE,

  );
  $form['key'] = array(

    '#type' => 'textfield',

    '#title' => t('app key'),

    '#default_value' => (!empty($weixin_config)) ? $weixin_config['key'] : '',

    '#size' => 60,

    '#maxlength' => 1000,

    '#required' => TRUE,

  );
  $form['appsecret'] = array(

    '#type' => 'textfield',

    '#title' => t('appsecret'),

    '#default_value' => (!empty($weixin_config)) ? $weixin_config['appsecret'] : '',

    '#size' => 60,

    '#maxlength' => 128,

    '#required' => TRUE,

  );

  $form['notify_url'] = array(

    '#type' => 'textfield',

    '#title' => t('notify_url'),

    '#default_value' => (!empty($weixin_config)) ? $weixin_config['notify_url'] : '',

    '#size' => 60,

    '#maxlength' => 128,

    '#required' => TRUE,

  );

  $form['submit'] = array('#type' => 'submit', '#value' => t('保存配置'));
  return $form;
}

function orders_weixin_settings_form_submit($form, &$form_state) {
  $values = serialize($form_state['values']);
  variable_set('weixin_settings', $values);
  drupal_set_message('微信配置保存成功');
}

function orders_update($orderid, $update_data) {
  global $user;
  if (!$user->uid) {
    return services_error(t('用户未登录'), 406);
  }
  $valid_update_fields = ['status', 'payment_type'];
  foreach ($update_data as $k => $v) {
    if (!in_array($k, $update_data)) {
      unset($update_data[$k]);
    }
  }
  $update_data = _services_arg_value($update_data, 'data');
  $data['id'] = $orderid;
  $data = (object) $update_data;
  $r = drupal_write_record('product_order', $update_data, 'id');
  return ['success' => 1];
}

function orders_refund($id){
  $order = db_query('SELECT * from product_order where sorderid='.$id)->fetch();
_alipay_refund($order);
}

/**
 * 支付宝退款
 */
function _alipay_refund($order) {
  $alipaysetting = unserialize(variable_get('alipay_settings'));
  require_once('alipay/AopSdk.php');
  $aop = new AopClient ();
  $aop->gatewayUrl = 'https://openapi.alipay.com/gateway.do';
  $aop->appId = $alipaysetting['app_id'];
  //$aop->rsaPrivateKeyFilePath = 'merchant_private_key_file';
  //$aop->alipayPublicKey = 'alipay_public_key_file';
  $aop->apiVersion = '1.0';
  $aop->postCharset = 'UTF-8';
  $aop -> signType = 'RSA';
  $aop->rsaPrivateKey = $alipaysetting['private_key'];
  $aop->format = "json";
  $aop->charset = "utf-8";
  $aop->alipayrsaPublicKey = $alipaysetting['public_key'];
  $aop->format = 'json';
  $aop ->timestamp = date('Y-m-d H:i:s');
  $request = new AlipayTradeRefundRequest ();
  $data = ['trade_no'=>$order-> alipay_order_id,'refund_amount' => $order -> total_price,'refund_reason' => '正常退款'];
  $request->setBizContent(json_encode($data));
  $result = $aop->execute($request);

  $responseNode = str_replace(".", "_", $request->getApiMethodName()) . "_response";
  $resultCode = $result->$responseNode->code;
  //var_export($result);
  if (!empty($resultCode) && $resultCode == 10000) {
    echo "成功";
  }
  else {
    echo "失败";
  }
}

/**
 * @支付宝订单查询
 */
function _alipay_orders_query() {
  require_once('alipay/AopSdk.php');
  $aop = new AopClient ();
  $aop->gatewayUrl = 'https://openapi.alipay.com/gateway.do';
  $aop->appId = 'your app_id';
  $aop->rsaPrivateKeyFilePath = 'merchant_private_key_file';
  $aop->alipayPublicKey = 'alipay_public_key_file';
  $aop->apiVersion = '1.0';
  $aop->postCharset = 'GBK';
  $aop->format = 'json';
  $request = new AlipayTradeQueryRequest ();
  $request->setBizContent("{" .
    "    \"out_trade_no\":\"20150320010101001\"," .
    "    \"trade_no\":\"2014112611001004680 073956707\"" .
    "  }");
  $result = $aop->execute($request);
}

/**
 * @支付宝退款查询
 */
function _alipay_orders_refund_query() {
  require_once('alipay/AopSdk.php');
  $aop = new AopClient ();
  $aop->gatewayUrl = 'https://openapi.alipay.com/gateway.do';
  $aop->appId = 'your app_id';
  $aop->rsaPrivateKeyFilePath = 'merchant_private_key_file';
  $aop->alipayPublicKey = 'alipay_public_key_file';
  $aop->apiVersion = '1.0';
  $aop->postCharset = 'GBK';
  $aop->format = 'json';
  $request = new AlipayTradeFastpayRefundQueryRequest ();
  $request->setBizContent("{" .
    "    \"trade_no\":\"20150320010101001\"," .
    "    \"out_trade_no\":\"2014112611001004680073956707\"," .
    "    \"out_request_no\":\"2014112611001004680073956707\"" .
    "  }");
  $result = $aop->execute($request);

  $responseNode = str_replace(".", "_", $request->getApiMethodName()) . "_response";
  $resultCode = $result->$responseNode->code;
  if (!empty($resultCode) && $resultCode == 10000) {
    echo "成功";
  }
  else {
    echo "失败";
  }
}

function cancelOrder($data) {
  $orderobj = new stdClass();
  $orderobj->id = $data->id;
  $orderobj->status = 7;//已取消
  drupal_write_record('product_order', $orderobj, 'id');
  $node = node_load($data->nid);
  $node->field_remain_num['und'][0]['value'] = $node->field_remain_num['und'][0]['value'] + 1;
  node_save($node);
}

function orders_expire_unpaid_order_by_uid($uid) {
  $result = db_update('product_order')
    ->fields(array(
      'status' => ORDER_STATUS_CANCEL,
      'updated' => REQUEST_TIME
    ))
    ->condition('uid', $uid, '=')
    ->condition('status', ORDER_STATUS_UNPAID, '=')
    ->condition('created', REQUEST_TIME - 1800, '<=')
    ->execute();
  return $result;
}

